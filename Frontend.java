/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sim;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Chris
 */
public class Frontend extends javax.swing.JFrame {

    /**
     * Creates new form Frontend
     */
    public Frontend() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        textArea.setLineWrap(true);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Frontend().setVisible(true);
            }
        });
        
        
        
        
        
        ArrayList<Person> people = new ArrayList<>();
       
        int numPeople = Integer.parseInt(  JOptionPane.showInputDialog(null, "How many people to start with?", "Altruism", 3));
        
        for (int j = 0; j < numPeople/9; j++) {
            people.add( new Person(9, 0) ); // 9: stingy guys - demand a lot, accept anything
            people.add( new Person(8, 1) ); // 8
            people.add( new Person(7, 2) ); // 7
            people.add( new Person(6, 3) ); // 6
            people.add( new Person(5, 4) ); // 5: medium guys - demand medium, accept anything above medium
            people.add( new Person(4, 3) ); // 4
            people.add( new Person(3, 2) ); // 3
            people.add( new Person(2, 1) ); // 2
            people.add( new Person(1, 0) ); // 1: chilled guys - don't demand much, accept most offers
        }
        
        // cycle through iterations
        for (int i = 0; i < numPeople - 10; i++) {
            int poorest = Integer.MAX_VALUE;
            int poorestIndex = -1;
            
            // cycle through people
            for (int j = 0; j < people.size(); j++) {
                if (!people.get(j).dead) {
                //some random guy to play with
                int rand;
                do {
                    rand = (int) (Math.random()*people.size());
                } while (people.get(rand).dead);
                
                // cut the cake game
                int demand1 = people.get(j).demandSomething();
                int demand2 = people.get(rand).demandSomething();
                if ((demand1 + demand2) <= 10) { // if their combined demands are less than or equal to 10, they both get stuff!
                    people.get(j).giveMoney(demand1);
                    people.get(rand).giveMoney(demand2);
                }
                
                // ultimatum game
                boolean accepted = people.get(rand).willYouAccept(10 - demand1); // offer the other guy the remained of the money
                if (accepted) { // if he accepts, they both get stuff!
                    people.get(j).giveMoney(demand1);
                    people.get(rand).giveMoney(10 - demand1);
                }
                
                // decide if poorest
                if (people.get(j).getCoffer() < poorest) {
                    poorest = people.get(j).getCoffer();
                    poorestIndex = j;
                }
                }
            }
            // remove if poorest
            people.set(poorestIndex, new Person());
            
            //display
            String message = "";
            for (int j = 0; j < people.size(); j++) {
                message += people.get(j).display;
            }

            textArea.setText(message);
            
        }
       
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
